const float2 Ws[18 * 18] = {
// Stage 1 omega values:
{ 1, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 2 omega values:
{ 1, 0 },
{ 6.123234e-17, -1 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 3 omega values:
{ 1, 0 },
{ 0.7071068, -0.7071068 },
{ 0, -1 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 4 omega values:
{ 1, 0 },
{ 0.9238795, -0.3826834 },
{ 0.7071068, -0.7071068 },
{ 0.3826834, -0.9238795 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 5 omega values:
{ 1, 0 },
{ 0.9807853, -0.1950903 },
{ 0.9238795, -0.3826834 },
{ 0.8314696, -0.5555702 },
{ 0.7071068, -0.7071068 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 6 omega values:
{ 1, 0 },
{ 0.9951847, -0.09801714 },
{ 0.9807853, -0.1950903 },
{ 0.9569404, -0.2902847 },
{ 0.9238795, -0.3826834 },
{ 0.8819213, -0.4713967 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 7 omega values:
{ 1, 0 },
{ 0.9987954, -0.04906768 },
{ 0.9951847, -0.09801714 },
{ 0.9891765, -0.1467305 },
{ 0.9807853, -0.1950903 },
{ 0.9700313, -0.2429802 },
{ 0.9569404, -0.2902847 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 8 omega values:
{ 1, 0 },
{ 0.9996988, -0.02454123 },
{ 0.9987954, -0.04906768 },
{ 0.9972904, -0.07356457 },
{ 0.9951847, -0.09801714 },
{ 0.9924796, -0.1224107 },
{ 0.9891765, -0.1467305 },
{ 0.9852777, -0.1709619 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 9 omega values:
{ 1, 0 },
{ 0.9999247, -0.01227154 },
{ 0.9996988, -0.02454123 },
{ 0.9993224, -0.03680722 },
{ 0.9987954, -0.04906768 },
{ 0.9981181, -0.06132074 },
{ 0.9972904, -0.07356457 },
{ 0.9963126, -0.08579731 },
{ 0.9951847, -0.09801714 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 10 omega values:
{ 1, 0 },
{ 0.9999812, -0.006135885 },
{ 0.9999247, -0.01227154 },
{ 0.9998306, -0.01840673 },
{ 0.9996988, -0.02454123 },
{ 0.9995294, -0.0306748 },
{ 0.9993224, -0.03680722 },
{ 0.9990777, -0.04293826 },
{ 0.9987954, -0.04906768 },
{ 0.9984756, -0.05519525 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 11 omega values:
{ 1, 0 },
{ 0.9999953, -0.003067957 },
{ 0.9999812, -0.006135885 },
{ 0.9999576, -0.009203754 },
{ 0.9999247, -0.01227154 },
{ 0.9998823, -0.01533921 },
{ 0.9998306, -0.01840673 },
{ 0.9997694, -0.02147408 },
{ 0.9996988, -0.02454123 },
{ 0.9996188, -0.02760815 },
{ 0.9995294, -0.0306748 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 12 omega values:
{ 1, 0 },
{ 0.9999988, -0.00153398 },
{ 0.9999953, -0.003067957 },
{ 0.9999894, -0.004601926 },
{ 0.9999812, -0.006135885 },
{ 0.9999706, -0.007669829 },
{ 0.9999576, -0.009203754 },
{ 0.9999424, -0.01073766 },
{ 0.9999247, -0.01227154 },
{ 0.9999047, -0.01380539 },
{ 0.9998823, -0.01533921 },
{ 0.9998577, -0.01687299 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 13 omega values:
{ 1, 0 },
{ 0.9999997, -0.0007669903 },
{ 0.9999988, -0.00153398 },
{ 0.9999974, -0.002300969 },
{ 0.9999953, -0.003067957 },
{ 0.9999927, -0.003834943 },
{ 0.9999894, -0.004601926 },
{ 0.9999856, -0.005368907 },
{ 0.9999812, -0.006135885 },
{ 0.9999762, -0.006902859 },
{ 0.9999706, -0.007669829 },
{ 0.9999644, -0.008436794 },
{ 0.9999576, -0.009203754 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 14 omega values:
{ 1, 0 },
{ 0.9999999, -0.0003834952 },
{ 0.9999997, -0.0007669903 },
{ 0.9999993, -0.001150485 },
{ 0.9999988, -0.00153398 },
{ 0.9999982, -0.001917475 },
{ 0.9999974, -0.002300969 },
{ 0.9999964, -0.002684463 },
{ 0.9999953, -0.003067957 },
{ 0.999994, -0.00345145 },
{ 0.9999927, -0.003834943 },
{ 0.9999911, -0.004218434 },
{ 0.9999894, -0.004601926 },
{ 0.9999876, -0.004985417 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 15 omega values:
{ 1, 0 },
{ 1, -0.0001917476 },
{ 0.9999999, -0.0003834952 },
{ 0.9999998, -0.0005752427 },
{ 0.9999997, -0.0007669903 },
{ 0.9999995, -0.0009587379 },
{ 0.9999993, -0.001150485 },
{ 0.9999991, -0.001342233 },
{ 0.9999988, -0.00153398 },
{ 0.9999985, -0.001725728 },
{ 0.9999982, -0.001917475 },
{ 0.9999978, -0.002109222 },
{ 0.9999974, -0.002300969 },
{ 0.9999969, -0.002492716 },
{ 0.9999964, -0.002684463 },
{ 0, 0 },
{ 0, 0 },
{ 0, 0 },
// Stage 16 omega values:
{ 1, 0 },
{ 1, -9.58738e-05 },
{ 1, -0.0001917476 },
{ 0.9999999, -0.0002876214 },
{ 0.9999999, -0.0003834952 },
{ 0.9999999, -0.000479369 },
{ 0.9999998, -0.0005752427 },
{ 0.9999998, -0.0006711165 },
{ 0.9999997, -0.0007669903 },
{ 0.9999996, -0.0008628641 },
{ 0.9999995, -0.0009587379 },
{ 0.9999995, -0.001054612 },
{ 0.9999993, -0.001150485 },
{ 0.9999992, -0.001246359 },
{ 0.9999991, -0.001342233 },
{ 0.999999, -0.001438107 },
{ 0, 0 },
{ 0, 0 },
// Stage 17 omega values:
{ 1, 0 },
{ 1, -4.79369e-05 },
{ 1, -9.58738e-05 },
{ 1, -0.0001438107 },
{ 1, -0.0001917476 },
{ 1, -0.0002396845 },
{ 0.9999999, -0.0002876214 },
{ 0.9999999, -0.0003355583 },
{ 0.9999999, -0.0003834952 },
{ 0.9999999, -0.0004314321 },
{ 0.9999999, -0.000479369 },
{ 0.9999999, -0.0005273059 },
{ 0.9999998, -0.0005752427 },
{ 0.9999998, -0.0006231797 },
{ 0.9999998, -0.0006711165 },
{ 0.9999998, -0.0007190534 },
{ 0.9999997, -0.0007669903 },
{ 0, 0 },
// Stage 18 omega values:
{ 1, 0 },
{ 1, -2.396845e-05 },
{ 1, -4.79369e-05 },
{ 1, -7.190535e-05 },
{ 1, -9.58738e-05 },
{ 1, -0.0001198422 },
{ 1, -0.0001438107 },
{ 1, -0.0001677791 },
{ 1, -0.0001917476 },
{ 1, -0.000215716 },
{ 1, -0.0002396845 },
{ 0.9999999, -0.0002636529 },
{ 0.9999999, -0.0002876214 },
{ 0.9999999, -0.0003115898 },
{ 0.9999999, -0.0003355583 },
{ 0.9999999, -0.0003595267 },
{ 0.9999999, -0.0003834952 },
{ 0.9999999, -0.0004074636 },
};

uint bitReverse(uint v) // TODO compare performance with lookup table
{
   // swap odd and even bits
   v = ((v >> 1) & 0x55555555) | ((v & 0x55555555) << 1);
   // swap consecutive pairs
   v = ((v >> 2) & 0x33333333) | ((v & 0x33333333) << 2);
   // swap nibbles
   v = ((v >> 4) & 0x0F0F0F0F) | ((v & 0x0F0F0F0F) << 4);
   // swap bytes
   v = ((v >> 8) & 0x00FF00FF) | ((v & 0x00FF00FF) << 8);
   // swap 2-byte long pairs
   v = ( v >> 16             ) | ( v               << 16);

   v = v >> BIT_REVERSE_SHIFT_VALUE;

   return v;
}

// TODO compact convert to/from real values

float2 complexMultiply(float2 a, float2 b)
{
   return (float2)(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
}

__kernel void bit_reverse_permutation(
   __global float2* input,
   __global float2* output
   )
{
   uint globalId = get_global_id(0);
   uint i1 = globalId;
   uint i2 = bitReverse(globalId);
   if (globalId < FFT_SIZE) //?
   {
      output[i2] = input[i1];
   }
}

__kernel void fft_stage(
   __global float2* input,
   __global float2* output,
   uint subFftSize,
   uint subFftCount,
   uint stageIndex
   )
{
   const uint subFftIndex = get_global_id(0);
   const uint subFftElementIndex = get_global_id(1);
   const float2 omegaK = Ws[18 * stageIndex + subFftElementIndex];
   const uint subFftHalfSize = subFftSize / 2;

   const uint index1 = subFftIndex * subFftSize + subFftElementIndex;
   const uint index2 = index1 + subFftHalfSize;

   const float2 input1 = input[index1];
   const float2 input2 = input[index2];

   const float2 y1 = input1 + complexMultiply(omegaK, input2);
   const float2 y2 = input1 - complexMultiply(omegaK, input2);

   output[index1] = y1;
   output[index2] = y2;
}

__kernel void convert_fft_to_frequencies(
   __global float2* complexInput,
   __global float2* realOutput,
   uint offset
   )
{
   const uint i = get_global_id(0);
   realOutput[i + offset] = complexInput[i].x;
}
